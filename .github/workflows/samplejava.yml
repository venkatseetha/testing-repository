name: Deploy Java Application

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build with Maven
      id: build
      run: |
        mvn clean install -e
        # Capture the path of the built JAR file
        JAR_FILE_PATH=$(find target -name "*.jar" | head -n 1)
        echo "JAR_FILE_PATH=$JAR_FILE_PATH" >> $GITHUB_ENV

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: ${{ env.JAR_FILE_PATH }}

    - name: SonarQube Scan
      id: sonarscan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn sonar:sonar \
          -Dsonar.projectKey=java-reachability-play_java-reachability-play \
          -Dsonar.host.url=http://54.160.102.12:9000 \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    - name: Download build artifacts
      if: always()
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: ./build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-to-assume: ${{ secrets.IAM_ROLE }}
        role-session-name: awsrolesession
        aws-region: "us-east-1"

    - name: Upload build artifacts to S3
      run: |
        aws s3 cp ${{ env.JAR_FILE_PATH }} s3://javabucket12121/
      env:
        AWS_DEFAULT_REGION: us-east-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy application to AWS CodeDeploy
      if: success() && steps.sonarscan.outcome == 'success'
      run: |
        aws deploy create-deployment \
          --application-name javaapp \
          --deployment-group-name my-dep-grp \
          --s3-location bucket=javabucket12121,bundleType=zip,key=$(basename ${{ env.JAR_FILE_PATH }})
